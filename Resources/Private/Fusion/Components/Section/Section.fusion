prototype(DIU.Grid:Content.Structure.Section) < prototype(DIU.Grid:Content.ContentCollection) {

    renderer = DIU.Grid:Components.Atom.Section {

        fluidLayout = ${q(node).property('fluidLayout') ? '-fluid' : ''}

        classNames = Neos.Fusion:Join {
            @glue = ' '
            addTopSpacingMobile = ${q(node).property('addTopSpacingMobile') ? q(node).property('addTopSpacingMobile') : ''}
            addTopSpacingTablet = ${q(node).property('addTopSpacingTablet') ? q(node).property('addTopSpacingTablet') : ''}
            addTopSpacingDesktop = ${q(node).property('addTopSpacingDesktop') ? q(node).property('addTopSpacingDesktop') : ''}
            addBottomSpacingMobile = ${q(node).property('addBottomSpacingMobile') ? q(node).property('addBottomSpacingMobile') : ''}
            addBottomSpacingTablet = ${q(node).property('addBottomSpacingTablet') ? q(node).property('addBottomSpacingTablet') : ''}
            addBottomSpacingDesktop = ${q(node).property('addBottomSpacingDesktop') ? q(node).property('addBottomSpacingDesktop') : ''}
            theme = ${q(node).property('theme') ? q(node).property('theme') : ''}
            color = ${q(node).property('color') ? 'color-' + q(node).property('color') : ''}

            hideOnMobile = ${'atom-section--hideOnMobile'}
            hideOnMobile.@if.set = ${q(node).property('hideOnMobile')}
            hideOnTablet = ${'atom-section--hideOnTablet'}
            hideOnTablet.@if.set = ${q(node).property('hideOnTablet')}
            hideOnDesktop = ${'atom-section--hideOnDesktop'}
            hideOnDesktop.@if.set = ${q(node).property('hideOnDesktop')}
        }
        classNames.@process.trim = ${String.trim(value)}

        offset = ${q(node).property('offset')}

        backgroundImage = Neos.Neos:ImageUri {
            asset = ${q(node).property('backgroundImage')}
            @if.hasAsset = ${q(node).property('backgroundImage') ? true : false}
        }

        anchorTag = ${q(node).property('anchorTag')}

    }
}
